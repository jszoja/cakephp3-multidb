<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\Event;
use Cake\Datasource\ConnectionManager;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/3.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('Security');`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();

        $this->loadComponent('RequestHandler', [
            'enableBeforeRedirect' => false,
        ]);
        $this->loadComponent('Flash');

        /*
         * Enable the following component for recommended CakePHP security settings.
         * see https://book.cakephp.org/3.0/en/controllers/components/security.html
         */
        //$this->loadComponent('Security');
    }

    public function beforeFilter(Event $event)
    {
        $this->__createCompanyConnection();
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }


    /**
     * Create the company connection based on the session var
     */
    private function __createCompanyConnection()
    {
        $company = $this->request->getSession()->read('company');
        if( empty($company) )
            return;

        $dbConf = ConnectionManager::getConfig('default');
        $dbConf['database'] = $company;
        ConnectionManager::setConfig( 'company', $dbConf );
    }


    /**
     * Update the company connection and corresponding session var
     *
     * @param $db
     */
    protected function _updateCompanyConnection($db)
    {
        $this->request->getSession()->write('company', $db);
        $conf = ConnectionManager::getConfig('company');
        $conf['database'] = $db;
        ConnectionManager::setConfig('companyNew', $conf);
        ConnectionManager::alias('companyNew', 'company');
    }
}
